<?xml version="1.0" encoding="UTF-8"?>
<project basedir="." default="dist" name="ANTProject">
  <!--
      Convert DocBook documents into ePUB files.
      
      ePUBis defined by the IDPF at www.idpf.org and is made of 3 standards:
      - Open Publication Structure (OPS)
      - Open Packaging Format (OPF) 
      - Open Container Format (OCF)
  -->
  
  <!-- Path to Docbook XML file. -->
  <property name="xmlFile" value=""/>
  
  <!-- Stylesheet for META-INF/container.xml, OPF and NCX output files. -->
  <property name="stylesheetFile" value="../docbook.xsl"/>

  <!-- Stylesheet for image src attribute in HTML files.  -->
  <property name="imagesStylesheetFile" value="../images.xsl"/>
  
  <!-- Stylesheet for add images in content.opf files. -->
  <property name="removeOldImagesStylesheetFile" value="../removeImagesContentOpf.xsl"/>
  
  <!-- Stylesheet for add images in content.opf files. -->
  <property name="addNewImagesStylesheetFile" value="../addImagesContentOpf.xsl"/>
  
  <!-- Path where the output ePUB file will be saved. -->
  <property name="outputFile" value=""/>
  
  <dirname property="xmlFileDir" file="${xmlFile}"/>
  <dirname property="outputDir" file="${outputFile}"/>
  <property name="metadir" value="${outputDir}/META-INF/"/>
  <property name="oebpsdir" value="${outputDir}/"/>
  
  <path id="classpath">
    <pathelement path="${java.class.path}"/>
  </path>
  
  <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>
  
  <target name="dist">
    <!-- Recreate output directory -->
    <delete dir="${outputDir}"/>
    <mkdir dir="${outputDir}"/>
    <!-- Temporary files. -->
    <property name="xincluded-profiled.xml" value="${outputDir}/xincluded-profiled.xml"/>
    <property name="dummy.xml" value="${outputDir}/dummy.xml"/>
    <!-- Copy the mime type file-->
    <copy file="mimetype" todir="${outputDir}"/>
    <xslt in="${xmlFile}" out="${xincluded-profiled.xml}" style="../../profiling/profile.xsl"
      classpath="${classpath}">
      <!--OXYGEN PATCH for EXM-19733-->
      <xmlcatalog>
        <catalogpath>
          <pathelement location="${ant.file.dir}/../../catalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
        value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
      <param name="profile.arch" expression="${profile.arch}" if="profile.arch"/>
      <param name="profile.audience" expression="${profile.audience}" if="profile.audience"/>
      <param name="profile.condition" expression="${profile.condition}" if="profile.condition"/>
      <param name="profile.conformance" expression="${profile.conformance}" if="profile.conformance"/>
      <param name="profile.lang" expression="${profile.lang}" if="profile.lang"/>
      <param name="profile.os" expression="${profile.os}" if="profile.os"/>
      <param name="profile.revision" expression="${profile.revision}" if="profile.revision"/>
      <param name="profile.revisionflag" expression="${profile.revisionflag}" if="profile.revisionflag"/>
      <param name="profile.role" expression="${profile.role}" if="profile.role"/>
      <param name="profile.security" expression="${profile.security}" if="profile.security"/>
      <param name="profile.status" expression="${profile.status}" if="profile.status"/>
      <param name="profile.userlevel" expression="${profile.userlevel}" if="profile.userlevel"/>
      <param name="profile.vendor" expression="${profile.vendor}" if="profile.vendor"/>
      <param name="profile.wordsize" expression="${profile.wordsize}" if="profile.wordsize"/>
      <param name="profile.attribute" expression="${profile.attribute}" if="profile.attribute"/>
      <param name="profile.value" expression="${profile.value}" if="profile.value"/>
    </xslt>
    <!-- The transformation for EPUB output. -->
    <xslt style="${stylesheetFile}" in="${xincluded-profiled.xml}" out="${dummy.xml}" classpath="${classpath}">
      <sysproperty key="org.apache.xerces.xni.parser.XMLParserConfiguration"
        value="org.apache.xerces.parsers.XIncludeParserConfiguration"/>
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../catalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <param name="base.dir" expression="${oebpsdir}"/>
      <param name="epub.metainf.dir" expression="${metadir}"/>
      <param name="epub.oebps.dir" expression="${oebpsdir}"/>
      <param name="epub.opf.fileref" expression="content.opf"/>
      <param name="xml.dir" expression="${xmlFileDir}"/>
      <param name="chunker.output.encoding" expression="${chunker.output.encoding}" if="chunker.output.encoding"/>
      <param name="chunk.quietly" expression="${chunk.quietly}" if="chunk.quietly"/>
    </xslt>
    <!-- Remove the not necessary output files. -->
    <delete file="${dummy.xml}"/>
    <delete file="${xincluded-profiled.xml}"/>
    
    <mkdir dir="${outputDir}/temp"/>
    <!-- Remove old images from content.opf. -->
    <xslt style="${removeOldImagesStylesheetFile}" in="${outputDir}/content.opf" out="${outputDir}/temp/content.opf" classpath="${classpath}">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
    </xslt>
    <copy file="${outputDir}/temp/content.opf" tofile="${outputDir}/content.opf"/>
    <!-- Add new images from content.opf. -->
    <foreach target="images" param="inputFile">
      <path>
        <fileset dir="${outputDir}">
          <include name="**/*.html"/>
        </fileset>
      </path>
    </foreach>
    <copy todir="${outputDir}">
      <fileset dir="${outputDir}/temp">
        <include name="**/*.html"/>
      </fileset>
    </copy>
    <delete dir="${outputDir}/temp"/>
    
    <!-- ZIP the EPUB file, keep the mimetype uncompressed. -->
    <zip destfile="${outputFile}" basedir="${outputDir}" compress="true"
      includes="META-INF/container.xml,toc.ncx, content.opf,container.opf, 
                 **/*.html,**/*.HTML,
                 **/*.jpg,**/*.jpeg,**/*.gif,**/*.png,**/*.svg,**/*.JPG,**/*.JPEG,**/*.GIF,**/*.PNG,**/*.SVG"/>
    <zip destfile="${outputFile}" basedir="${outputDir}" includes="mimetype" update="true"
      keepcompression="true" compress="false"/>
  </target>
  
  <target name="images">
    <basename file="${inputFile}" property="fileName"/>
    
    <echo message="inputFile: ${inputFile}"/>
    <echo message="fileName: ${fileName}"/>
    <echo message="inputDir: ${xmlFileDir}"/>
    <echo message="outputDir: ${outputDir}"/>
    <echo message="images: images"/>
    <xslt style="${imagesStylesheetFile}" in="${inputFile}" out="${outputDir}/temp/${fileName}" classpath="${classpath}">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <param name="inputDir" expression="${xmlFileDir}"/>
      <param name="outputDir" expression="${outputDir}"/>
      <param name="imagesDir" expression="images"/>
    </xslt>
    <xslt style="${addNewImagesStylesheetFile}" in="${outputDir}/content.opf" out="${outputDir}/temp/content.opf" classpath="${classpath}">
      <xmlcatalog>
        <catalogpath>
          <pathelement location="../../../../xhtml11/dtd/xhtmlcatalog.xml"/>
        </catalogpath>
      </xmlcatalog>
      <param name="inputFile" expression="${outputDir}/temp/${fileName}"/>
    </xslt>
    <copy file="${outputDir}/temp/content.opf" tofile="${outputDir}/content.opf"/>
  </target>
</project>
